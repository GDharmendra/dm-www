--- 
title:      Finding Records
body_id:    docs
created_at: Tue Dec 04 14:46:32 +1030 2007
filter:
  - erb
  - textile
--- 

h1. <%= @page.title %>

The finder methods for DataMapper objects are defined in DataMapper::Persistence. They include @[]@, @all()@, @first()@

h2. Finder Methods

DataMapper has methods which allow you to grab a single record by primary key, the first match to a set of conditions, or a collection of records matching conditions.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
zoo   = Zoo[1]                      # get the zoo with primary key of 1
zoo   = Zoo['DFW']                  # wow, support for natural primary keys
zoo   = Zoo.first(:name => 'Luke')  # first matching record with the name 'Luke'
zoos  = Zoo.all                     # all zoos
zoos  = Zoo.all(:open => true)      # all zoos that are open
<% end %>

h2. Conditions

Rather than defining conditions using SQL fragments, we can actually specify conditions using a hash.

The examples above are pretty simple, but you might be wondering how we can specify conditions beyond equality without resorting to SQL. Well, thanks to some clever additions to the Symbol class it's easy!

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
exhibitions = Exibition.all(:run_time.gt => 2, :run_time.lt => 5)
# => SQL conditions: 'run_time > 1 AND run_time < 5'
<% end %>

Valid symbol operators for the conditions are:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
gt    # greater than
lt    # less than
gte   # greater than or equal
lte   # less than or equal
not   # not equal
like  # like
in    # in - will be used automatically when an array is passed in as an argument
<% end %>

h3. Compatibility

DataMapper supports other conditions syntaxes as well:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
zoos = Zoo.all(:conditions => {:id => 34})
zoos = Zoo.all(:conditions => ["id = ?", 34])

# even mix and match
zoos = Zoo.all(:conditions => {:id => 34}, :name.like => '%foo%')
<% end %>

h2. Find By SQL

Sometimes you may find that you need to tweak a query using your own SQL. 

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
zoos = database.query('SELECT name, open FROM zoos WHERE open = 1')
#      Note that this will not return Zoo objects, rather the raw data straight from the database
#      Zoo.find_by_sql() would have worked here, too
<% end %>

@zoos@ will be full of Struct objects with @name@, and @open@ attributes, rather than instances of the Zoo class.  They'll also be read-only. You can still use the interpolated array condition syntax as well:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
zoos = database.query('SELECT name, open FROM zoos WHERE name = ?', "Awesome Zoo")
<% end %>

h2. Counting

The count method returns an integer of the number of records matching the every condition you pass in.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
count = Zoo.count(:age.gt => 200) #=> 2
<% end %>

h2. Each

DataMapper sports an incredibly powerful @each@ method with safely iterates over large quantities of rows in a table performing the block you pass in.  Think of it like a @Animal.find(:all).each {}@ block, but so much easier on your resources.  Rather than instantiating all objects and then iterating over them, @each@ works in batches and only instantiates a batch of results at a time, then iterates over items in the batch.  Notice how you can pass it @options@ just like a finder.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
Animal.each(:species => 'Mammal').each do |a|
  a.reproduce!
end
<% end %>






